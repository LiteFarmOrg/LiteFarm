name: Docker Compose Workflow

on:   
  pull_request:
    branches:
      - integration

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up .env file
        run: |
          echo "DEV_DATABASE_HOST=litefarm-db" >> .env
          echo "DEV_DATABASE=pg-litefarm" >> .env
          echo "DEV_DATABASE_USER=postgres" >> .env
          echo "DEV_DATABASE_PASSWORD=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_DB=pg-litefarm" >> .env

      - name: View .env file
        run: cat .env
        
      - name: Set up backend .env file
        run: |
            echo "DEV_DATABASE_HOST=litefarm-db" >> packages/api/.env
            echo "DEV_DATABASE=pg-litefarm" >> packages/api/.env
            echo "DEV_DATABASE_USER=postgres" >> packages/api/.env
            echo "DEV_DATABASE_PASSWORD=postgres" >> packages/api/.env
            echo "POSTGRES_PASSWORD=postgres" >> packages/api/.env
            echo "POSTGRES_USER=postgres" >> packages/api/.env
            echo "POSTGRES_DB=pg-litefarm" >> packages/api/.env
            echo "JWT_INVITE_SECRET=${{ secrets.JWT_INVITE_SECRET }}" >> packages/api/.env
            echo "JWT_RESET_SECRET=${{ secrets.JWT_RESET_SECRET }}" >> packages/api/.env
            echo "JWT_SCHEDULER_SECRET=${{ secrets.JWT_SCHEDULER_SECRET }}" >> packages/api/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> packages/api/.env
            echo "TEST_USER=${{ secrets.TEST_USER }}" >> packages/api/.env
            echo "TEST_USER_ID=${{ secrets.TEST_USER_ID }}" >> packages/api/.env
            echo "GOOGLE_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}" >> packages/api/.env
            echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}" >> packages/api/.env
            echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> packages/api/.env
            echo "NODE_ENV=development" >> packages/api/.env
  
      - name: Set up frontend .env file
        run: |
            echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> packages/webapp/.env
            echo "VITE_ENV=development" >> packages/webapp/.env
            echo "VITE_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.VITE_GOOGLE_OAUTH_CLIENT_ID }}" >> packages/webapp/.env
            echo "VITE_DO_BUCKET_NAME=litefarm" >> packages/webapp/.env
            echo "NODE_ENV=development" >> packages/webapp/.env


      - name: Set up Docker Compose
        uses: isbang/compose-action@v1.4.1
        with:
          compose-file: docker-compose.ci.yml

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: List running containers
        run: docker ps
      
      - name: find db container ip address
        id: get_ip
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' litefarm-web) 
          echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Cypress dependencies
        working-directory: packages/webapp
        run: pnpm install --config.auto-install-peers=true --no-frozen-lockfile --force
        
      - name: List running containers
        run: docker ps

      - name: Run Cypress tests
        working-directory: packages/webapp
        run: npx cypress run --browser chrome --config baseUrl=http://${{ env.CONTAINER_IP }}:80 --record --key 2630f414-4914-48b0-907d-aa3a9cc6a30b
        continue-on-error: true

      - name: check db container logs
        if: always()
        run: docker logs litefarm-db

      - name: inspect api logs
        if: always()
        run: docker logs litefarm-api
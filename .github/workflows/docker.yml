name: Docker Compose Workflow

on:   
  pull_request:
    branches:
      - integration

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up .env file
        run: |
          echo "DEV_DATABASE_HOST=litefarm-db" >> .env
          echo "DEV_DATABASE=pg-litefarm" >> .env
          echo "DEV_DATABASE_USER=postgres" >> .env
          echo "DEV_DATABASE_PASSWORD=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_DB=pg-litefarm" >> .env

      - name: View .env file
        run: cat .env
        
      - name: Set up backend .env file
        run: |
            echo "DEV_DATABASE_HOST=litefarm-db" >> packages/api/.env
            echo "DEV_DATABASE=pg-litefarm" >> packages/api/.env
            echo "DEV_DATABASE_USER=postgres" >> packages/api/.env
            echo "DEV_DATABASE_PASSWORD=postgres" >> packages/api/.env
            echo "POSTGRES_PASSWORD=postgres" >> packages/api/.env
            echo "POSTGRES_USER=postgres" >> packages/api/.env
            echo "POSTGRES_DB=pg-litefarm" >> packages/api/.env
            echo "JWT_INVITE_SECRET=${{ secrets.JWT_INVITE_SECRET }}" >> packages/api/.env
            echo "JWT_RESET_SECRET=${{ secrets.JWT_RESET_SECRET }}" >> packages/api/.env
            echo "JWT_SCHEDULER_SECRET=${{ secrets.JWT_SCHEDULER_SECRET }}" >> packages/api/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> packages/api/.env
            echo "TEST_USER=${{ secrets.TEST_USER }}" >> packages/api/.env
            echo "TEST_USER_ID=${{ secrets.TEST_USER_ID }}" >> packages/api/.env
            echo "GOOGLE_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}" >> packages/api/.env
            echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}" >> packages/api/.env
            echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> packages/api/.env
            echo "NODE_ENV=development" >> packages/api/.env
  
      - name: Set up frontend .env file
        run: |
            echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> packages/webapp/.env
            echo "VITE_ENV=development" >> packages/webapp/.env
            echo "VITE_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.VITE_GOOGLE_OAUTH_CLIENT_ID }}" >> packages/webapp/.env
            echo "VITE_DO_BUCKET_NAME=litefarm" >> packages/webapp/.env
            echo "NODE_ENV=development" >> packages/webapp/.env

      - name: Cache package dependencies
        uses: actions/cache@v2
        with:
          path: |
                packages/api/node_modules
                packages/webapp/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Cache Docker dependencies
        uses: actions/cache@v2
        with:
          path: |
              packages/api/node_modules
              packages/webapp/node_modules
          key: ${{ runner.os }}-docker-dependencies-${{ hashFiles('**/Dockerfile') }}
        

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: List running containers
        run: docker ps
      
      - name: Get frontend container ip address
        id: get_frontend_ip
        run: |
           FRONT_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' litefarm-web) 
           echo "FRONT_CONTAINER_IP=$FRONT_CONTAINER_IP" >> $GITHUB_ENV
      
      - name: Get backend container ip address
        id: get_backend_ip
        run: |
              BACK_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' litefarm-api) 
              echo "BACK_CONTAINER_IP=$BACK_CONTAINER_IP" >> $GITHUB_ENV

      - name: Update Cypress environment file
        run: sed -i "s|http://localhost:5001|http://${{ env.BACK_CONTAINER_IP }}:5000|g" packages/webapp/cypress.env.json


      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Cypress dependencies
        working-directory: packages/webapp
        run: pnpm install --config.auto-install-peers=true --no-frozen-lockfile --force
        
      - name: List running containers
        run: docker ps

      - name: Run Cypress tests
        working-directory: packages/webapp
        run: npx cypress run --browser chrome --env baseUrl=http://${{ env.FRONT_CONTAINER_IP }}:3000,api_server=http://${{ env.BACK_CONTAINER_IP }}:5000 --spec "cypress/e2e/tasksFlow.spec.js" --record --key 2630f414-4914-48b0-907d-aa3a9cc6a30b

      - name: Set code coverage commit status
        continue-on-error: true
        working-directory: packages/webapp
        run: npx set-gh-status
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          GH_SHA: ${{ github.event.after }}